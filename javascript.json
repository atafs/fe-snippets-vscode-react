{
    "print to console": {
        "prefix": "cl",
        "description": "console log to the console",
        "body": "console.log('$1', $1)"
    },
    "create a react stateless component": {
        "prefix": "rf",
        "description": "react functional or stateless component",
        "body": [
            "import React from 'react'",
            "",
            "const $1 = (props) => ()",
            "",
            "export default $1"
        ]
    },
    "create for jest a describe block": {
        "prefix": "jdes",
        "description": "jest describe",
        "body": [
            "describe('$DESCRIBE', () => {",
            "",
            "})"
        ]
    },
    "create for jest an it block": {
        "prefix": "jit",
        "description": "jest it",
        "body": [
            "it('$IT', () => {",
            "",
            "})"
        ]
    },
    "create for jest a toEqual expectation": {
        "prefix": "jtoequal",
        "description": "jest to equal",
        "body":  "expect($PREVIOUS).toEqual($EXPECTED)"
    },
    "create for jest a simulate press": {
        "prefix": "jsimulatepress",
        "description": "jest simulate press",
        "body": [
            "import React from 'react'",
            "import { shallow, configure } from 'enzyme'",
            "import Adapter from 'enzyme-adapter-react-16'",
            "import { Actions } from 'react-native-router-flux'",
            "",
            "import TouchableComponent from '../TouchableComponent'",
            "",
            "configure({ adapter: new Adapter() })",
            "",
            "jest.mock('react-native-router-flux', () => ({",
            "  Actions: {",
            "    pop: jest.fn()",
            "  }",
            "}))",
            "",
            "describe(TouchableComponent.name, () => {",
            "  const props = {",
            "    a: 'a',",
            "    b: 0",
            "  }",
            "",
            "  const wrapper = shallow(<TouchableComponent {...props} />)",
            "  ",
            "  describe('renders correctly', () => {",
            "    it('with only the name and image', () => {",
            "      expect(wrapper).toMatchSnapshot()",
            "    })",
            "",
            "    it('when I press on the navigation button', () => {",
            "     wrapper.find('TouchableOpacity').simulate('press')",
            "      expect(Actions.pop).toHaveBeenCalledTimes(1)",
            "    })",
            "  })",
            "})"
        ]
    },
    "create for jest a simulate press with a testID as props to find the element": {
        "prefix": "jsimulatepress",
        "description": "jest simulate press with a testID",
        "body": [
			"import React from 'react'",
			"import { Linking } from 'react-native'",
			"import { shallow, configure } from 'enzyme'",
			"import Adapter from 'enzyme-adapter-react-16'",
			"",
			"import Component from '../Component'",
			"",
			"configure({ adapter: new Adapter() })",
			"",
			"jest.mock('Linking')",
			"",
			"describe(Component.name, () => {",
			"  const props = {",
			"    a: 'a',",
			"    b: 0",
			"  }",
			"",
			"  describe('renders correctly', () => {",
			"    it('when I tap on the element', () => {",
			"      const wrapper = shallow(<Component {...props} />)",
			"      wrapper.find('[testID=\"Component\"]').simulate('press')",
			"      expect(Linking.openURL).toHaveBeenCalledTimes(1)",
			"    })",
			"  })",
			"})"
        ]
    }, 
    "react native reusable component: touchable image": {
        "prefix": "rntitl",
        "description": "touchable image positioned in the top, left corner",
        "body": [
			"import React from 'react'",
			"import { View, Image, TouchableOpacity, StyleSheet } from 'react-native'",
			"import PropTypes from 'prop-types'",
			"",
			"const RNativeImageInTopLeftCorner = () => {",
			"  const handlePress = () => {",
			"    console.log('I AM HERE')",
			"  }",
			"",
			"  const component = (",
			"    <TouchableOpacity",
			"      onPress={handlePress}",
			"      style={styles.container}",
			"    >",
			"      <Image",
			"        source={require('../Assets/image.png')}",
			"        style={styles.icon}",
			"      />",
			"    </TouchableOpacity>",
			"  )",
			"",
			"  return (",
			"    <View style={styles.view}>",
			"      {component}",
			"    </View>",
			"  )",
			"}",
			"",
			"const styles = StyleSheet.create({",
			"  view: {",
			"    paddingTop: 35,",
			"    borderColor: 'lightGray',",
			"    borderBottomWidth: 1,",
			"    flexDirection: 'column',",
			"    padding: 15,",
			"    alignItems: 'center',",
			"    backgroundColor: 'white'",
			"  },",
			"  container: {",
			"    position: 'absolute',",
			"    top: 0,",
			"    left: 0,",
			"    padding: 15",
			"  },",
			"  icon: {",
			"    height: 20",
			"  }",
			"})",
			"",
			"export default RNativeImageInTopLeftCorner"
        ]
	}
}